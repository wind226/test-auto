name: Go

on:
  push:
#    branches: [ main ]
    tags:
      - v*
#  pull_request:
#    branches: [ main ]

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
#          body: |
#            xxx


  build_release:
    name: Build release
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            go_os: linux
            x7z_name: Linux
            bin_name: testx
#            arch_amd64: amd64
#            arch_386: 386
          - os: macos-latest
            go_os: darwin
            x7z_name: darwin
            bin_name: testx
          - os: windows-latest
            go_os: windows
            x7z_name: Windows
            bin_name: testx.exe
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

#      - name: Install Linux Go
#        if: matrix.os == 'ubuntu-latest'
#      - name: Install macOS Go
#        if: matrix.os == 'macos-latest'

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: |
          set CGO_ENABLED=0
          set GOOS=${{ matrix.go_os }}
          set GOARCH=amd64
          go build -v ./testx.go
          7z a -r testx_${{ matrix.x7z_name }}_amd64.7z ${{ matrix.bin_name }}
          ls
          del ${{ matrix.bin_name }}
          set CGO_ENABLED=0
          set GOOS=${{ matrix.go_os }}
          set GOARCH=386
          go build -v ./testx.go
          7z a -r test_${{ matrix.x7z_name }}_386.7z ${{ matrix.bin_name }}

#      - name: Build Unix
#        if: matrix.os == 'macos-latest'
#        run: |
#          CGO_ENABLED=0 GOOS=${{ matrix.go_os }} GOARCH=amd64 go build -v ./magic.go
#          7z a -r magic-test_${{ matrix.x7z_name }}_amd64.7z ${{ matrix.bin_name }} dict
#      - name: Build Linux
#        if: matrix.os == 'ubuntu-latest'
#        run: |
#          CGO_ENABLED=0 GOOS=${{ matrix.go_os }} GOARCH=amd64 go build -v ./magic.go
#          7z a -r magic-test_${{ matrix.x7z_name }}_amd64.7z ${{ matrix.bin_name }} dict
#          rm -rf ${{ matrix.bin_name }}
#          CGO_ENABLED=0 GOOS=${{ matrix.go_os }} GOARCH=386 go build -v ./magic.go
#          7z a -r magic-test_${{ matrix.x7z_name }}_386.7z ${{ matrix.bin_name }} dict

      - name: Upload Release amd64
        id: upload-release-asset
        uses: actions/upload-release-asset@main
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./testx_${{ matrix.x7z_name }}_amd64.7z
          asset_name: testx_${{ matrix.x7z_name }}_amd64.7z
          asset_content_type: application/x-7z-compressed

      - name: Upload Release 386 [linux|windows]
        if: matrix.os != 'macos-latest'
        uses: actions/upload-release-asset@main
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./testx_${{ matrix.x7z_name }}_386.7z
          asset_name: testx_${{ matrix.x7z_name }}_386.7z
          asset_content_type: application/x-7z-compressed
